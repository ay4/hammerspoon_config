#+title: Dalet Config
#+property: header-args:lua :tangle ./init.lua :mkdirp yes
#+STARTUP: overview

* Automatic config reload
Will automatically reload config file when init.lua has been updated. This means it will automatically be reloaded when this org file is tangled!

#+begin_src lua
function reloadConfig(files)
    doReload = false
    for _,file in pairs(files) do
        if file:sub(-4) == ".lua" then
            doReload = true
        end
    end
    if doReload then
        hs.reload()
    end
end
myWatcher = hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reloadConfig):start()
hs.alert.show("Hammerspoon: Config Loaded")

#+end_src

* HYPER key
On *laptop*, my CapsLock should serve as ctrl+option+shift. On the main keyboard, it's ctrl+cmd+shift which is needed for different window management on both. The main keyboard is condifgured via QMK.

** Dirty Mac Hack
This line of code will remap capslock to F18 using an internal mac method. There's no other way to remap capslock unless one uses Karabiner.

#+begin_src lua
hs.execute("hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x700000039,\"HIDKeyboardModifierMappingDst\":0x70000006D}]}'")
#+end_src

** Defining a modal

'hyper' will now become a mode, essentially a namespace for further hotkeys. It will be activated when CapsLock ('f18') is pressed and deactivated when it's depressed. So, all hotkeys in this namespace will only work when it's pressed. Look more in the [[https://www.hammerspoon.org/docs/hs.hotkey.modal.html][docs]].

#+begin_src lua
hyper = hs.hotkey.modal.new({}, nil)

hyper.pressed = function()
  hyper:enter()
end

hyper.released = function()
  hyper:exit()
end

hs.hotkey.bind({}, 'F18', hyper.pressed, hyper.released)
#+end_src

** Dirty hack inside a modal
We will now run a loop over a string called useful_chars and within this loop add each char to the hyper modal. The outcome of this will be that MacOS will perceive capslock+any of these chars and cmd+shift+ctrl+the same char. This will allow to set up casplock-based hotkeys in any native app.

Notably, any other symbol won't work for this.

#+begin_src lua
local useful_chars="abcdefghijklmnopqrstuvwxyz0123456789"

for i=1, #useful_chars do
   local c = useful_chars:sub(i,i)
    hyper:bind({}, c, function()
        hs.eventtap.event.newKeyEvent({"shift", "ctrl", "alt"}, c, true):post()
        hs.eventtap.event.newKeyEvent({"shift", "ctrl", "alt"}, c, false):post()
    end)
end
#+end_src


* Switching layouts

- Command+Shift+1 = English
- Commad+Shift+2 = Russian

Notably if the layout names change, this will seize to work.

#+begin_src lua

hs.hotkey.bind({"cmd","alt"} , 18, function()
    hs.keycodes.setLayout("ABC")
end)


hs.hotkey.bind({"cmd","alt"}, 19, function()
    hs.keycodes.setLayout("Russian â€“ PC")
end)
#+end_src


* Window management

** Function to determine screen
#+begin_src lua
    function isLaptopScreen()
    -- Get the current screen
    local currentScreen = hs.screen.mainScreen()

    -- Check the name of the screen (change "Color LCD" to the actual name of your laptop's screen)
    return currentScreen:name() == "Built-in Retina Display"
end
#+end_src

** Defining grid

If this grid changes, everything will stop working because lower the values of specific window positions are hardcoded, i.e. not calculated from the grid.

#+begin_src lua
hs.grid.setGrid('12x8')

 function moveWin(cell, window)
    window = hs.window.focusedWindow()
    hs.grid.set(window, cell, screen)
end
#+end_src

** Maximizing shortcut

#+begin_src lua
hs.hotkey.bind({"ctrl", "shift", "alt"}, "w", function() hs.grid.maximizeWindow() end)
#+end_src

** Bindings

*** Halves
#+begin_src lua

laptop_left_half={
x = 0,
y = 0,
w = 6,
h = 8
}

laptop_right_half={
x = 6,
y = 0,
w = 6,
h = 8
}

desktop_center_left={
x = 2,
y = 1,
w = 4,
h = 6
}

desktop_center_right={
x = 6,
y = 1,
w = 4,
h = 6
}

hs.hotkey.bind({"ctrl", "shift", "alt"}, "a", function()
    if isLaptopScreen() then
        moveWin(laptop_left_half)
    else
        moveWin(desktop_center_left)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "d", function()
    if isLaptopScreen() then
        moveWin(laptop_right_half)
    else
        moveWin(desktop_center_right)
    end
end)

#+end_src

*** Center and Keynote
#+begin_src lua

laptop_center={
x = 2,
y = 1,
w = 9,
h = 6
}

desktop_center_center={
x = 3,
y = 2,
w = 6,
h = 4
}

desktop_keynote={
x = 2,
y = 0,
w = 8,
h = 8
}

hs.hotkey.bind({"ctrl", "shift", "alt"}, "s", function()
    if isLaptopScreen() then
        moveWin(laptop_center)
    else
        moveWin(desktop_center_center)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "k", function()
    if not isLaptopScreen() then
        moveWin(desktop_keynote)
    end
end)

#+end_src

*** Messengers and File Managers
#+begin_src lua

laptop_messenger_top={
x = 0,
y = 0,
w = 2,
h = 4
}

laptop_messenger_bottom={
x = 0,
y = 4,
w = 2,
h = 4
}

desktop_messenger_top={
x = 0,
y = 0,
w = 2,
h = 4
}

desktop_messenger_bottom={
x = 0,
y = 4,
w = 2,
h = 4
}

desktop_manager_top={
x = 10,
y = 0,
w = 2,
h = 4
}

desktop_manager_bottom={
x = 10,
y = 4,
w = 2,
h = 4
}

hs.hotkey.bind({"ctrl", "shift", "alt"}, "q", function()
    if isLaptopScreen() then
        moveWin(laptop_messenger_top)
    else
        moveWin(desktop_messenger_top)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "z", function()
    if isLaptopScreen() then
        moveWin(laptop_messenger_bottom)
    else
        moveWin(desktop_messenger_bottom)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "e", function()
    if not isLaptopScreen() then
        moveWin(desktop_manager_top)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "x", function()
    if not isLaptopScreen() then
        moveWin(desktop_manager_bottom)
    end
end)

#+end_src

*** Vertical text editor
#+begin_src lua
desktop_vertical={
x = 4,
y = 1,
w = 4,
h = 6
}

hs.hotkey.bind({"ctrl", "shift", "alt"}, "v", function()
    if not isLaptopScreen() then
        moveWin(desktop_vertical)
    end
end)
#+end_src

*** Thirds
#+begin_src lua

-- Define window positions for the first, second, and third thirds of the laptop screen
laptop_first_third = {
    x = 0,
    y = 0,
    w = 4, -- Assuming a screen width of 12 units for simplicity
    h = 8  -- Assuming full height
}

laptop_second_third = {
    x = 4,
    y = 0,
    w = 4,
    h = 8
}

laptop_third_third = {
    x = 8,
    y = 0,
    w = 4,
    h = 8
}

-- Bind hotkeys for each third
hs.hotkey.bind({"ctrl", "shift", "alt"}, "1", function()
    if isLaptopScreen() then
        moveWin(laptop_first_third)
    else
        hs.alert.show("Not on the laptop screen!", 2)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "2", function()
    if isLaptopScreen() then
        moveWin(laptop_second_third)
    else
        hs.alert.show("Not on the laptop screen!", 2)
    end
end)

hs.hotkey.bind({"ctrl", "shift", "alt"}, "3", function()
    if isLaptopScreen() then
        moveWin(laptop_third_third)
    else
        hs.alert.show("Not on the laptop screen!", 2)
    end
end)

#+end_src

* Hiding application
...instead of minimizng it.

#+begin_src lua
hs.hotkey.bind({"cmd"}, "M", function()
  local currentapp=hs.application.frontmostApplication()
  currentapp:hide()
end)
#+end_src
* Middle mouth scrolling (disabled)

-- id of mouse wheel button
local mouseScrollButtonId = 2

-- scroll speed and direction config
local scrollSpeedMultiplier = 0.1
local scrollSpeedSquareAcceleration = true
local reverseVerticalScrollDirection = true
local mouseScrollTimerDelay = 0.01

-- circle config
local mouseScrollCircleRad = 10
local mouseScrollCircleDeadZone = 5

------------------------------------------------------------------------------------------

local mouseScrollCircle = nil
local mouseScrollTimer = nil
local mouseScrollStartPos = 0
local mouseScrollDragPosX = nil
local mouseScrollDragPosY = nil

overrideScrollMouseDown = hs.eventtap.new({ hs.eventtap.event.types.otherMouseDown }, function(e)
    -- uncomment line below to see the ID of pressed button
    --print(e:getProperty(hs.eventtap.event.properties['mouseEventButtonNumber']))

    if e:getProperty(hs.eventtap.event.properties['mouseEventButtonNumber']) == mouseScrollButtonId then
        -- remove circle if exists
        if mouseScrollCircle then
            mouseScrollCircle:delete()
            mouseScrollCircle = nil
        end

        -- stop timer if running
        if mouseScrollTimer then
            mouseScrollTimer:stop()
            mouseScrollTimer = nil
        end

        -- save mouse coordinates
        mouseScrollStartPos = hs.mouse.getAbsolutePosition()
        mouseScrollDragPosX = mouseScrollStartPos.x
        mouseScrollDragPosY = mouseScrollStartPos.y

        -- start scroll timer
        mouseScrollTimer = hs.timer.doAfter(mouseScrollTimerDelay, mouseScrollTimerFunction)

        -- don't send scroll button down event
        return true
    end
end)

overrideScrollMouseUp = hs.eventtap.new({ hs.eventtap.event.types.otherMouseUp }, function(e)
    if e:getProperty(hs.eventtap.event.properties['mouseEventButtonNumber']) == mouseScrollButtonId then
        -- send original button up event if released within 'mouseScrollCircleDeadZone' pixels of original position and scroll circle doesn't exist
        mouseScrollPos = hs.mouse.getAbsolutePosition()
        xDiff = math.abs(mouseScrollPos.x - mouseScrollStartPos.x)
        yDiff = math.abs(mouseScrollPos.y - mouseScrollStartPos.y)
        if (xDiff < mouseScrollCircleDeadZone and yDiff < mouseScrollCircleDeadZone) and not mouseScrollCircle then
            -- disable scroll mouse override
            overrideScrollMouseDown:stop()
            overrideScrollMouseUp:stop()

            -- send scroll mouse click
            hs.eventtap.otherClick(e:location(), mouseScrollButtonId)

            -- re-enable scroll mouse override
            overrideScrollMouseDown:start()
            overrideScrollMouseUp:start()
        end

        -- remove circle if exists
        if mouseScrollCircle then
            mouseScrollCircle:delete()
            mouseScrollCircle = nil
        end

        -- stop timer if running
        if mouseScrollTimer then
            mouseScrollTimer:stop()
            mouseScrollTimer = nil
        end

        -- don't send scroll button up event
        return true
    end
end)

overrideScrollMouseDrag = hs.eventtap.new({ hs.eventtap.event.types.otherMouseDragged }, function(e)
    -- sanity check
    if mouseScrollDragPosX == nil or mouseScrollDragPosY == nil then
        return true
    end

    -- update mouse coordinates
    mouseScrollDragPosX = mouseScrollDragPosX + e:getProperty(hs.eventtap.event.properties['mouseEventDeltaX'])
    mouseScrollDragPosY = mouseScrollDragPosY + e:getProperty(hs.eventtap.event.properties['mouseEventDeltaY'])

    -- don't send scroll button drag event
    return true
end)

function mouseScrollTimerFunction()
    -- sanity check
    if mouseScrollDragPosX ~= nil and mouseScrollDragPosY ~= nil then
        -- get cursor position difference from original click
        xDiff = math.abs(mouseScrollDragPosX - mouseScrollStartPos.x)
        yDiff = math.abs(mouseScrollDragPosY - mouseScrollStartPos.y)

        -- draw circle if not yet drawn and cursor moved more than 'mouseScrollCircleDeadZone' pixels
        if mouseScrollCircle == nil and (xDiff > mouseScrollCircleDeadZone or yDiff > mouseScrollCircleDeadZone) then
            mouseScrollCircle = hs.drawing.circle(hs.geometry.rect(mouseScrollStartPos.x - mouseScrollCircleRad, mouseScrollStartPos.y - mouseScrollCircleRad, mouseScrollCircleRad * 2, mouseScrollCircleRad * 2))
            mouseScrollCircle:setStrokeColor({["red"]=0.3, ["green"]=0.3, ["blue"]=0.3, ["alpha"]=1})
            mouseScrollCircle:setFill(false)
            mouseScrollCircle:setStrokeWidth(1)
            mouseScrollCircle:show()
        end

        -- send scroll event if cursor moved more than circle's radius
        if xDiff > mouseScrollCircleRad or yDiff > mouseScrollCircleRad then
            -- get real xDiff and yDiff
            deltaX = mouseScrollDragPosX - mouseScrollStartPos.x
            deltaY = mouseScrollDragPosY - mouseScrollStartPos.y

            -- use 'scrollSpeedMultiplier'
            deltaX = deltaX * scrollSpeedMultiplier
            deltaY = deltaY * scrollSpeedMultiplier

            -- square for better scroll acceleration
            if scrollSpeedSquareAcceleration then
                -- mod to keep negative values
                deltaXDirMod = 1
                deltaYDirMod = 1

                if deltaX < 0 then
                    deltaXDirMod = -1
                end
                if deltaY < 0 then
                    deltaYDirMod = -1
                end

                deltaX = deltaX * deltaX * deltaXDirMod
                deltaY = deltaY * deltaY * deltaYDirMod
            end

            -- math.ceil / math.floor - scroll event accepts only integers
             deltaXRounding = math.ceil
             deltaYRounding = math.ceil

             if deltaX < 0 then
                 deltaXRounding = math.floor
             end
             if deltaY < 0 then
                 deltaYRounding = math.floor
             end

             deltaX = deltaXRounding(deltaX)
             deltaY = deltaYRounding(deltaY)

            -- reverse Y scroll if 'reverseVerticalScrollDirection' set to true
            if reverseVerticalScrollDirection then
                deltaY = deltaY * -1
            end

            -- send scroll event
            hs.eventtap.event.newScrollEvent({-deltaX, deltaY}, {}, 'pixel'):post()
        end
    end

    -- restart timer
    mouseScrollTimer = hs.timer.doAfter(mouseScrollTimerDelay, mouseScrollTimerFunction)
end

-- start override functions
overrideScrollMouseDown:start()
overrideScrollMouseUp:start()
overrideScrollMouseDrag:start()
