#+title: Dalet Config
#+property: header-args:lua :tangle ./init.lua :mkdirp yes
#+STARTUP: overview

* Automatic reload
Will automatically reload config file when init.lua has been updated. This means it will automatically be reloaded when this org file is tangled!

#+begin_src lua
function reloadConfig(files)
    doReload = false
    for _,file in pairs(files) do
        if file:sub(-4) == ".lua" then
            doReload = true
        end
    end
    if doReload then
        hs.reload()
    end
end
myWatcher = hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reloadConfig):start()
hs.alert.show("Hammerspoon: Config Loaded")

#+end_src

* Implementing HYPER key
My CapsLock should serve as ctrl+shift+cmd.

** Dirty Mac Hack
This line of code will remap capslock to F18 using an internal mac method. There's no other way to remap capslock unless one uses Karabiner.

#+begin_src lua
hs.execute("hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x700000039,\"HIDKeyboardModifierMappingDst\":0x70000006D}]}'")
#+end_src

** Defining a modal

'hyper' will now become a mode, essentially a namespace for further hotkeys. It will be activated when CapsLock ('f18') is pressed and deactivated when it's depressed. So, all hotkeys in this namespace will only work when it's pressed. Look more in the [[https://www.hammerspoon.org/docs/hs.hotkey.modal.html][docs]].

#+begin_src lua
hyper = hs.hotkey.modal.new({}, nil)

hyper.pressed = function()
  hyper:enter()
end

hyper.released = function()
  hyper:exit()
end

hs.hotkey.bind({}, 'F18', hyper.pressed, hyper.released)
#+end_src

** Dirty hack inside a modal
We will now run a loop over a string called useful_chars and within this loop add each char to the hyper modal. The outcome of this will be that MacOS will perceive capslock+any of these chars and cmd+shift+ctrl+the same char. This will allow to set up casplock-based hotkeys in any native app.

Notably, any other symbol won't work for this.

#+begin_src lua
local useful_chars="abcdefghijklmnopqrstuvwxyz0123456789"

for i=1, #useful_chars do
   local c = useful_chars:sub(i,i)
    hyper:bind({}, c, function()
        hs.eventtap.event.newKeyEvent({"shift", "ctrl", "cmd"}, c, true):post()
        hs.eventtap.event.newKeyEvent({"shift", "ctrl", "cmd"}, c, false):post()
    end)
end
#+end_src


* Implementing switching layouts

- Command+Shift+1 = English
- Commad+Shift+2 = Russian

Notably if the layout names change, this will seize to work.

#+begin_src lua

hs.hotkey.bind({"cmd","alt"} , 18, function()
    hs.keycodes.setLayout("ABC")
end)


hs.hotkey.bind({"cmd","alt"}, 19, function()
    hs.keycodes.setLayout("Russian â€“ PC")
end)
#+end_src


* Switching windows

** Defining grid

Right now, if this grid changes, everything will stop working because lower the values of specific window positions are hardcoded, i.e. not calculated from the grid.

#+begin_src lua
hs.grid.setGrid('12x6')

function moveWin(cell, window)
   window = hs.window.focusedWindow()
   hs.grid.set(window, cell, screen)
end
#+end_src

** Maximizing shortcut

#+begin_src lua
hyper:bind({}, "w", function() hs.grid.maximizeWindow() end)
#+end_src

** Messengers: small windows on the left
#+begin_src lua
local messenger_top={
  x = 0,
  y = 0,
  w = 2,
  h = 3
}

local messenger_bottom={
  x = 0,
  y = 3,
  w = 2,
  h = 3
}

local messenger_center={
  x = 0,
  y = 1,
  w = 2,
  h = 4
}

hyper:bind({}, "1", function() moveWin(messenger_top) end)
hyper:bind({}, "2", function() moveWin(messenger_center) end)
hyper:bind({}, "3", function() moveWin(messenger_bottom) end)
#+end_src

** Centering window
Notably, it's just a "center position", not centering a window whatever size it is. Maybe actually I should change that.

#+begin_src lua
local global_center={
  x = 2,
  y = 1,
  w = 8,
  h = 4
}

hyper:bind({}, "s", function() moveWin(global_center) end)
#+end_src

** Small halves
These are mainly for larger screens, practically unusable on a laptop.

#+begin_src lua
local small_half_left={
  x = 2,
  y = 1,
  w = 4,
  h = 4
}

local small_half_right={
  x = 6,
  y = 1,
  w = 4,
  h = 4
}

hyper:bind({}, "left", function() moveWin(small_half_left) end)
hyper:bind({}, "right", function() moveWin(small_half_right) end)
#+end_src

** Thirds

#+begin_src lua
local left_third={
  x = 0,
  y = 0,
  w = 4,
  h = 6
}

local mid_third={
  x = 4,
  y = 0,
  w = 4,
  h = 6
}

local right_third={
  x = 8,
  y = 0,
  w = 4,
  h = 6
}

hyper:bind({}, ",", function() moveWin(left_third) end)
hyper:bind({}, ".", function() moveWin(mid_third) end)
hyper:bind({}, "/", function() moveWin(right_third) end)
#+end_src

** Big halves

#+begin_src lua
local left_half={
  x = 0,
  y = 0,
  w = 6,
  h = 6
}

local right_half={
  x = 7,
  y = 0,
  w = 6,
  h = 6
}

hyper:bind({}, "a", function() moveWin(left_half) end)
hyper:bind({}, "s", function() moveWin(right_half) end)
#+end_src

** Quarters
#+begin_src lua
local topleft_quarter={
  x = 0,
  y = 0,
  w = 6,
  h = 3
}

local botleft_quarter={
  x = 0,
  y = 3,
  w = 6,
  h = 3
}

local topright_quarter={
  x = 6,
  y = 0,
  w = 6,
  h = 3
}

local botright_quarter={
  x = 6,
  y = 3,
  w = 6,
  h = 3
}

hyper:bind({}, "q", function() moveWin(topleft_quarter) end)
hyper:bind({}, "z", function() moveWin(botleft_quarter) end)
hyper:bind({}, "e", function() moveWin(topright_quarter) end)
hyper:bind({}, "x", function() moveWin(botright_quarter) end)
#+end_src

** Small windows on the right

#+begin_src lua
local files_top={
  x = 10,
  y = 0,
  w = 2,
  h = 3
}

local files_bottom={
  x = 10,
  y = 3,
  w = 2,
  h = 3
}

hyper:bind({}, "9", function() moveWin(files_top) end)
hyper:bind({}, "0", function() moveWin(files_bottom) end)
#+end_src
